"use client";
import Navbar from "../../components/Navbar/Navbar";
import "./page.css";
import { useEffect, useState } from "react";
import "bootstrap/dist/css/bootstrap.min.css";
import "bootstrap-icons/font/bootstrap-icons.css";
import Modal from "react-bootstrap/Modal";

import Swal from "sweetalert2";

const Trader = () => {
  interface Trader {
    trader_id: string;
    company_name: string;
    dealer_name: string;
    national_id: string;
    email: string;
    phone_number: string;
    start_date: string;
    end_date: string;
    status: string;
  }

  interface Training {
    course_id: string;
    course_level: string;
    course_name: string;
    course_details: string;
    course_date: string;
    course_place: string;
    course_hour: number;
    course_minute: number;
    course_seat: number;
    status: "‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥" | "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô" | "‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥";
  }

  const [traders, setTraders] = useState<Trader[]>([]);
  const [showEditModal, setShowEditModal] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [selectedTrader, setSelectedTrader] = useState<Trader | null>(null);
  // const [fullscreen, setFullscreen] = useState(true);
  const [show, setShow] = useState(false);
  const [newTraderId, setNewTraderId] = useState<string>("");
  const [editTrader, setEditTrader] = useState<Trader | null>(null);
  const [isEditing, setIsEditing] = useState(false);
  const [searchId, setSearchId] = useState("");
  // const [traderData, setTraderData] = useState<Trader | null>(null);
  const [registeredCourses, setRegisteredCourses] = useState<Training[]>([]);

  function handleShow() {
    // setFullscreen(breakpoint);
    setShow(true);

    const nextTraderId = traders.length + 1;
    const formattedId = `TRD-${String(nextTraderId).padStart(4, "0")}`;
    setNewTraderId(formattedId);

    const currentDate = new Date().toISOString().split("T")[0];
    const startDateInput = document.getElementsByName(
      "start_date"
    )[0] as HTMLInputElement;
    if (startDateInput) {
      startDateInput.value = currentDate; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ start_date ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      startDateInput.disabled = true; // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÑ‡∏î‡πâ
    }
  }

  const openModal = async (traderId: string) => {
    console.log("‡πÄ‡∏õ‡∏¥‡∏î modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö trader ID:", traderId);
    try {
      const response = await fetch(`http://localhost:8750/traders/${traderId}`);
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      const result = await response.json();

      console.log("üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API:", result);

      if (result && result.data) {
        setSelectedTrader(result.data); // ‚úÖ ‡πÉ‡∏ä‡πâ result.data ‡πÅ‡∏ó‡∏ô data ‡∏ï‡∏£‡∏á ‡πÜ

        const courseRes = await fetch(
          `http://localhost:8750/training/registered/${traderId}`
        );
        if (!courseRes.ok) {
          throw new Error(`HTTP error! Status: ${courseRes.status}`);
        }
        const courseData = await courseRes.json();
        console.log("üìö ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô:", courseData);
        setRegisteredCourses(courseData); // ‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á state

        setTimeout(() => {
          console.log("üü¢ ‡πÄ‡∏õ‡∏¥‡∏î Modal");
          setShowModal(true);
        }, 100);
      } else {
        console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• trader");
      }
    } catch (error) {
      console.error("Error fetching trader details:", error);
    }
  };

  const handleAddTrader = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!(e.target instanceof HTMLFormElement)) {
      console.error("Error: e.target is not a form.");
      return;
    }

    const form = e.target;
    const formData = new FormData(form);

    const startDate =
      (formData.get("start_date") as string) ||
      new Date().toISOString().split("T")[0]; // set default to today

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ startDate ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    const startDateObj = new Date(startDate);
    if (isNaN(startDateObj.getTime())) {
      console.error("Invalid start date:", startDate);
      window.alert("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      return;
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì end_date ‡∏à‡∏≤‡∏Å start_date ‡πÇ‡∏î‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏° 2 ‡∏õ‡∏µ
    const endDateObj = new Date(startDateObj);
    endDateObj.setFullYear(startDateObj.getFullYear() + 2);
    const endDate = endDateObj.toISOString().split("T")[0];

    const newTraderId = (traders.length + 1).toString();
    const newTrader = {
      trader_id: newTraderId,
      dealer_name: formData.get("dealer_name"),
      national_id: formData.get("national_id"),
      company_name: formData.get("company_name"),
      email: formData.get("email"),
      phone_number: formData.get("phone_number"),
      start_date: startDate,
      end_date: endDate,
      status: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
    };

    if (
      !newTrader.dealer_name ||
      !newTrader.national_id ||
      !newTrader.company_name ||
      !newTrader.email ||
      !newTrader.phone_number
    ) {
      Swal.fire({
        title: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô!",
        text: "‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ï‡πà‡∏≠",
        icon: "warning",
        confirmButtonText: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
      });
      return;
    }

    try {
      const response = await fetch("http://localhost:8750/traders/addTrader", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(newTrader),
      });

      if (response.ok) {
        console.log("Trader added successfully");
        Swal.fire({
          title: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏Ñ‡πâ‡∏≤‡∏ï‡∏£‡∏≤‡∏™‡∏≤‡∏£‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
          text: "‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô",
          icon: "success",
          confirmButtonText: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
        });
        setShow(false);
        fetchAllTraders();
      } else {
        console.error("Failed to add trader");
        Swal.fire({
          title: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏Ñ‡πâ‡∏≤‡∏ï‡∏£‡∏≤‡∏™‡∏≤‡∏£‡∏´‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
          text: "‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô",
          icon: "error",
          confirmButtonText: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
        });
      }
    } catch (error) {
      console.error("Error adding trader:", error);
    }
  };

  const handleDeleteTrader = (traderId: string) => {
    Swal.fire({
      title: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£?",
      text: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ã‡πà‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ô‡∏µ‡πâ",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    }).then((result) => {
      if (result.isConfirmed) {
        setTraders((prevTraders) => {
          // ‡∏•‡∏ö trader ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
          const updatedTraders = prevTraders.filter(
            (t) => t.trader_id !== traderId
          );

          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï trader_id ‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
          const reorderedTraders = updatedTraders.map((trader, index) => ({
            ...trader,
            trader_id: `TRD-${String(index + 1).padStart(4, "0")}`, // trader_id ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 1 ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà
          }));

          return reorderedTraders;
        });

        Swal.fire("‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß", "success");
      }
    });
  };

  const handleCancel = () => {
    setShow(false);

    const form = document.getElementById("addTraderForm") as HTMLFormElement;
    if (form) {
      form.reset();
    }

    const startDateInput = document.getElementsByName(
      "start_date"
    )[0] as HTMLInputElement;
    if (startDateInput) {
      startDateInput.value = ""; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤ start_date
    }
  };

  const handleEdit = async (traderId: string) => {
    console.log("üîπ handleSave ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ", traderId); // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ function ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏´‡∏°

    if (!traderId) {
      console.error("traderId ‡πÄ‡∏õ‡πá‡∏ô undefined ‡∏´‡∏£‡∏∑‡∏≠ null");
      Swal.fire({
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!",
        text: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡∏Ñ‡πâ‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà",
        icon: "error",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
        customClass: {
          title: "swal-title",
          popup: "swal-popup",
          confirmButton: "swal-confirm-button",
        },
      });
      return;
    }

    try {
      console.log("editTrader:", editTrader);
      console.log("Trader ID ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ:", traderId);
      const response = await fetch(
        `http://localhost:8750/traders/${traderId}`,
        {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(editTrader),
        }
      );

      if (!response.ok) {
        console.error(
          "Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ, status:",
          response.status
        );
        const errorMessage = await response.text(); // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å API
        console.error("‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å API:", errorMessage);
        Swal.fire({
          title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!",
          text: errorMessage || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ",
          icon: "error",
          confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
          customClass: {
            title: "swal-title",
            popup: "swal-popup",
            confirmButton: "swal-confirm-button",
          },
        });
        return;
      }

      const result = await response.json();
      console.log("API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö:", result);

      if (result.status === "Success") {
        Swal.fire({
          title: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
          text: "‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ï‡πà‡∏≠",
          icon: "success",
          confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
          customClass: {
            title: "swal-title",
            popup: "swal-popup",
            confirmButton: "swal-confirm-button",
          },
        }).then(() => {
          window.location.reload(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤
        });
        setSelectedTrader(editTrader); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô State ‡∏´‡∏•‡∏±‡∏Å
        setShowEditModal(false); // ‡∏õ‡∏¥‡∏î Modal
      } else if (
        !editTrader?.dealer_name ||
        !editTrader?.national_id ||
        !editTrader?.email ||
        !editTrader?.phone_number
      ) {
        Swal.fire({
          title: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö!",
          text: "‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ï‡πà‡∏≠",
          icon: "warning",
          confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
          customClass: {
            title: "swal-title",
            popup: "swal-popup",
            confirmButton: "swal-confirm-button",
          },
        });
        return;
      } else {
        console.error("Error from API:", result.message);
        Swal.fire({
          title: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ!",
          text: "‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ï‡πà‡∏≠",
          icon: "error",
          confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
          customClass: {
            title: "swal-title",
            popup: "swal-popup",
            confirmButton: "swal-confirm-button",
          },
        });
      }
    } catch (error) {
      console.error("Error updating trader:", error);
      Swal.fire({
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å!",
        text: "‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ï‡πà‡∏≠",
        icon: "error",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
        customClass: {
          title: "swal-title",
          popup: "swal-popup",
          confirmButton: "swal-confirm-button",
        },
      });
    }
  };

  const fetchAllTraders = async () => {
    try {
      const response = await fetch("http://localhost:8750/traders/getList");
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const result = await response.json();
      console.log("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", result);
      setTraders(result.data); // ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    } catch (error) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
      Swal.fire({
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!",
        text: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ",
        icon: "error",
      });
    }
  };

  const handleSearch = async () => {
    if (!searchId) {
      Swal.fire({
        title: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Trader ID!",
        text: "‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏ Trader ID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤",
        icon: "warning",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
      });
      return;
    }

    try {
      const response = await fetch(`http://localhost:8750/traders/${searchId}`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      console.log("‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", result);

      if (result.status === "Success") {
        setTraders([result.data]); // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
      } else {
        setTraders([]);
        Swal.fire({
          title: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•!",
          text: "Trader ID ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö",
          icon: "error",
        });
      }
    } catch (error) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
      setTraders([]); // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      Swal.fire({
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!",
        text: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ",
        icon: "error",
      });
    }
  };

  const handleClearSearch = () => {
    setSearchId(""); // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    fetchAllTraders(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
  };

  useEffect(() => {
    // fetchTraders();
    fetchAllTraders();
  }, []);

  useEffect(() => {
    console.log("üîÑ selectedTrader ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï:", selectedTrader);
    if (selectedTrader) {
      setEditTrader({ ...selectedTrader }); // Clone object ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    }
  }, [selectedTrader]);

  useEffect(() => {
    console.log("üîÑ showEditModal ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï:", showEditModal);
  }, [showEditModal]);

  return (
    <div className="trader-warrapper">
      <Navbar />
      <div className="trader-container">
        <div className="trader-header">
          <h2 className="text-header">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏Ñ‡πâ‡∏≤‡∏ï‡∏£‡∏≤‡∏™‡∏≤‡∏£‡∏´‡∏ô‡∏µ‡πâ</h2>
        </div>
        <div className="trader-table-wrapper">
          <div className="trader-table-container-wrapper">
            <div className="trader-table-container-search">
              <div className="trader-table-container-search-input">
                <i
                  className="bi bi-search"
                  onClick={() => {
                    handleSearch();
                  }}
                ></i>
                <input
                  type="text"
                  placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡∏Ñ‡πâ‡∏≤‡∏ï‡∏£‡∏≤‡∏™‡∏≤‡∏£‡∏´‡∏ô‡∏µ‡πâ"
                  value={searchId}
                  onChange={(e) => setSearchId(e.target.value)}
                />
              </div>
              <div className="trader-table-container-button-clear">
                <button
                  className="btn"
                  onClick={() => {
                    handleClearSearch();
                  }}
                >
                  ‡∏•‡πâ‡∏≤‡∏á
                </button>
              </div>
            </div>

            <div className="trader-table-container-button">
              <button
                type="button"
                className="btn btn-outline-success"
                onClick={() => {
                  handleShow();
                }}
              >
                ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏Ñ‡πâ‡∏≤‡∏ï‡∏£‡∏≤‡∏™‡∏≤‡∏£‡∏´‡∏ô‡∏µ‡πâ
              </button>
            </div>
          </div>
          <table className="trader-table-container">
            <thead className="trader-table-header">
              <tr className="trader-table-row">
                <th className="trader-table-row-th">‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡∏Ñ‡πâ‡∏≤‡∏ï‡∏£‡∏≤‡∏™‡∏≤‡∏£‡∏´‡∏ô‡∏µ‡πâ</th>
                <th className="trader-table-row-th">‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î</th>
                <th className="trader-table-row-th">‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Ñ‡πâ‡∏≤‡∏ï‡∏£‡∏≤‡∏™‡∏≤‡∏£‡∏´‡∏ô‡∏µ‡πâ</th>
                <th className="trader-table-row-th">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                <th className="trader-table-row-th">‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</th>
              </tr>
            </thead>
            <tbody className="trader-table-body">
              {traders.length > 0 ? (
                traders.map((trader) => (
                  <tr key={trader.trader_id} className="trader-table-column">
                    <td className="trader-table-column-td">
                      {trader.trader_id}
                    </td>
                    <td className="trader-table-column-td">
                      {trader.company_name}
                    </td>
                    <td className="trader-table-column-td">
                      {trader.dealer_name}
                    </td>
                    <td
                      className="trader-table-column-td"
                      style={{
                        color:
                          trader.status === "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
                            ? "green"
                            : trader.status === "‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
                            ? "red"
                            : "gray",
                      }}
                    >
                      {trader.status}
                    </td>
                    <td className="trader-table-column-td">
                      <a
                        className="trader-table-column-link-edit "
                        onClick={() => {
                          openModal(trader.trader_id);
                        }}
                      >
                        ‡∏î‡∏π‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                      </a>
                      <span className="trader-table-column-spacer">|</span>
                      <a
                        className="trader-table-column-link-delete "
                        onClick={() => handleDeleteTrader(trader.trader_id)}
                      >
                        ‡∏•‡∏ö
                      </a>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan={5} className="trader-table-column-td">
                    ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                  </td>
                </tr>
              )}
            </tbody>
          </table>

          {/* {‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏Ñ‡πâ‡∏≤‡∏ï‡∏£‡∏≤‡∏™‡∏≤‡∏£‡∏´‡∏ô‡∏µ‡πâ} */}
          <Modal
            show={show}
            onHide={handleCancel}
            className="addtrader-modal"
            style={{ fontFamily: "Noto Sans Thai" }}
          >
            <Modal.Header>
              <Modal.Title>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏Ñ‡πâ‡∏≤‡∏ï‡∏£‡∏≤‡∏™‡∏≤‡∏£‡∏´‡∏ô‡∏µ‡πâ</Modal.Title>
            </Modal.Header>
            <Modal.Body>
              <form id="addTraderForm" onSubmit={handleAddTrader} method="POST">
                <div className="form-group">
                  <label>‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡∏Ñ‡πâ‡∏≤‡∏ï‡∏£‡∏≤‡∏™‡∏≤‡∏£‡∏´‡∏ô‡∏µ‡πâ</label>
                  <input
                    type="text"
                    className="form-control"
                    value={newTraderId}
                    readOnly
                  />
                </div>
                <div className="form-group">
                  <label>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Ñ‡πâ‡∏≤‡∏ï‡∏£‡∏≤‡∏™‡∏≤‡∏£‡∏´‡∏ô‡∏µ‡πâ</label>
                  <input
                    type="text"
                    name="dealer_name"
                    className="form-control"
                    placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Ñ‡πâ‡∏≤‡∏ï‡∏£‡∏≤‡∏™‡∏≤‡∏£‡∏´‡∏ô‡∏µ‡πâ"
                  />
                </div>
                <div className="form-group">
                  <label>‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô</label>
                  <input
                    type="text"
                    name="national_id"
                    className="form-control"
                    placeholder="‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"
                  />
                </div>
                <div className="form-group">
                  <label>‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î</label>
                  <input
                    type="text"
                    name="company_name"
                    className="form-control"
                    placeholder="‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î"
                  />
                </div>
                <div className="form-group">
                  <label>‡∏≠‡∏µ‡πÄ‡∏°‡∏•</label>
                  <input
                    type="text"
                    name="email"
                    className="form-control"
                    placeholder="‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
                  />
                </div>
                <div className="form-group">
                  <label>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</label>
                  <input
                    type="text"
                    name="phone_number"
                    className="form-control"
                    placeholder="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"
                  />
                </div>
                <div className="form-group">
                  <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡∏Ñ‡πâ‡∏≤‡∏ï‡∏£‡∏≤‡∏™‡∏≤‡∏£‡∏´‡∏ô‡∏µ‡πâ</label>
                  <input
                    type="date"
                    name="start_date"
                    className="form-control"
                    value={new Date().toISOString().split("T")[0]} // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                    disabled
                  />
                </div>
                <div className="button-container">
                  <button className="btn btn-success" type="submit">
                    ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
                  </button>
                  <button
                    className="btn btn-danger"
                    type="button"
                    onClick={handleCancel}
                  >
                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                  </button>
                </div>
              </form>
            </Modal.Body>
            <Modal.Footer></Modal.Footer>
          </Modal>

          {/* ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏Ñ‡πâ‡∏≤‡∏ï‡∏£‡∏≤‡∏™‡∏≤‡∏£‡∏´‡∏ô‡∏µ‡πâ/‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏Ñ‡πâ‡∏≤‡∏ï‡∏£‡∏≤‡∏™‡∏≤‡∏£‡∏´‡∏ô‡∏µ‡πâ */}
          <Modal
            key={selectedTrader?.trader_id || Math.random()}
            // key={forceRender}
            show={showModal}
            // fullscreen={fullscreen.toString()}
            onHide={() => setShowModal(false)}
            style={{ fontFamily: "Noto Sans Thai" }}
            className="custom-modal"
          >
            <Modal.Header>
              <Modal.Title id="contained-modal-title-vcenter">
                {isEditing
                  ? "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏Ñ‡πâ‡∏≤‡∏ï‡∏£‡∏≤‡∏™‡∏≤‡∏£‡∏´‡∏ô‡∏µ‡πâ"
                  : "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏Ñ‡πâ‡∏≤‡∏ï‡∏£‡∏≤‡∏™‡∏≤‡∏£‡∏´‡∏ô‡∏µ‡πâ"}
              </Modal.Title>
            </Modal.Header>
            <Modal.Body>
              <form>
                <p>
                  <strong>‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡∏Ñ‡πâ‡∏≤‡∏ï‡∏£‡∏≤‡∏™‡∏≤‡∏£‡∏´‡∏ô‡∏µ‡πâ :</strong>
                  {isEditing ? (
                    <input
                      type="text"
                      className="form-control"
                      value={editTrader?.trader_id || ""}
                      onChange={(e) =>
                        setEditTrader({
                          ...(editTrader as Trader),
                          trader_id: e.target.value,
                        })
                      }
                      readOnly
                    />
                  ) : (
                    <span>{selectedTrader?.trader_id || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}</span>
                  )}
                </p>

                <p>
                  <strong>‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• :</strong>
                  {isEditing ? (
                    <input
                      type="text"
                      className="form-control"
                      value={editTrader?.dealer_name || ""}
                      onChange={(e) =>
                        setEditTrader({
                          ...(editTrader as Trader),
                          dealer_name: e.target.value,
                        })
                      }
                    />
                  ) : (
                    <span>{selectedTrader?.dealer_name || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}</span>
                  )}
                </p>
                <p>
                  <strong>‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô :</strong>{" "}
                  {isEditing ? (
                    <input
                      type="text"
                      className="form-control"
                      value={editTrader?.national_id || ""}
                      onChange={(e) =>
                        setEditTrader({
                          ...(editTrader as Trader),
                          national_id: e.target.value,
                        })
                      }
                    />
                  ) : (
                    <span>{selectedTrader?.national_id || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}</span>
                  )}
                </p>
                <p>
                  <strong>‡∏≠‡∏µ‡πÄ‡∏°‡∏• :</strong>{" "}
                  {isEditing ? (
                    <input
                      type="text"
                      className="form-control"
                      value={editTrader?.email || ""}
                      onChange={(e) =>
                        setEditTrader({
                          ...(editTrader as Trader),
                          email: e.target.value,
                        })
                      }
                    />
                  ) : (
                    <span>{selectedTrader?.email || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}</span>
                  )}
                </p>
                <p>
                  <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå :</strong>{" "}
                  {isEditing ? (
                    <input
                      type="text"
                      className="form-control"
                      value={editTrader?.phone_number || ""}
                      onChange={(e) =>
                        setEditTrader({
                          ...(editTrader as Trader),
                          phone_number: e.target.value,
                        })
                      }
                    />
                  ) : (
                    <span>{selectedTrader?.phone_number || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}</span>
                  )}
                </p>
                <p>
                  <strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡∏Ñ‡πâ‡∏≤‡∏ï‡∏£‡∏≤‡∏™‡∏≤‡∏£‡∏´‡∏ô‡∏µ‡πâ :</strong>{" "}
                  {selectedTrader?.start_date
                    ? selectedTrader.start_date.split("T")[0]
                    : " ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}
                </p>
                <p>
                  <strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡∏Ñ‡πâ‡∏≤‡∏ï‡∏£‡∏≤‡∏™‡∏≤‡∏£‡∏´‡∏ô‡∏µ‡πâ :</strong>{" "}
                  {selectedTrader?.end_date
                    ? selectedTrader.end_date.split("T")[0]
                    : " ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}
                </p>
                <p>
                  <strong>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Ñ‡πâ‡∏≤‡∏ï‡∏£‡∏≤‡∏™‡∏≤‡∏£‡∏´‡∏ô‡∏µ‡πâ :</strong>
                </p>
                <ul>
                  {registeredCourses.length > 0 ? (
                    registeredCourses.map((course, index) => (
                      <li key={index}>
                        <p>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ö‡∏£‡∏°: {course.course_date.split('T')[0]}</p>
                        <p>‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£: {course.course_name}</p>
                        <p>‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ö‡∏£‡∏°: {course.course_place}</p>
                        <p>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á: {course.course_hour}</p>
                        <p>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {course.status}</p>
                        <hr />
                      </li>
                    ))
                  ) : (
                    <li>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</li>
                  )}
                </ul>
              </form>
            </Modal.Body>

            <Modal.Footer>
              {isEditing ? (
                <>
                  <button
                    className="btn btn-success"
                    onClick={() => {
                      console.log("üîπ ‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡∏π‡∏Å‡∏Å‡∏î! ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å handleSave");
                      handleEdit(editTrader?.trader_id ?? "");
                    }}
                  >
                    ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                  </button>
                  <button
                    className="btn btn-secondary"
                    onClick={() => setIsEditing(false)}
                  >
                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                  </button>
                </>
              ) : (
                <button
                  className="btn btn-primary"
                  onClick={() => setIsEditing(true)}
                >
                  ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                </button>
              )}
              <button
                className="btn btn-danger"
                onClick={() => setShowModal(false)}
              >
                ‡∏õ‡∏¥‡∏î
              </button>
            </Modal.Footer>
          </Modal>
        </div>
      </div>
    </div>
  );
};

export default Trader;
