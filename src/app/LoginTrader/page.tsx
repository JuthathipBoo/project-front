"use client";

import "./page.css";
import React from "react";
import "bootstrap/dist/css/bootstrap.min.css";
import "bootstrap-icons/font/bootstrap-icons.css";
import { useState } from "react";
import Swal from "sweetalert2";

const LoginTrader = () => {
  const [email, setEmail] = useState("");
    const [national_id, setnational_id] = useState("");
  
  const handleLogin = async () => {
    try {
      const response = await fetch("http://localhost:8750/loginTrader/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email: email, national_id }),
      });
  
      const data = await response.json();
  
      console.log("üîπ Response ‡∏à‡∏≤‡∏Å API:", data); 
  
      if (!response.ok) {
        alert(data.message);
        return;
      }
  
      localStorage.setItem("tokenTrader", data.token);
  
      if (data.trader) {
        localStorage.setItem("trader", JSON.stringify(data.trader));
        console.log("Trader ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô LocalStorage:", data.trader);
      } else {
        console.warn("Trader ‡πÄ‡∏õ‡πá‡∏ô null ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤!");
      }
  
      Swal.fire({
        title: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
        text: "‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô",
        icon: "success",
        confirmButtonText: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
      });
  
      window.location.href = "/traders/dashboard";
    } catch (error) {
      console.error("üö® Error:", error);
      Swal.fire({
        title: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!",
        text: "‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô",
        icon: "warning",
        confirmButtonText: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
      });
    }
  };
  
  
  
  return (
    <div className="login-wrapper">
      <div className="login-container">
        <div className="header">
          <h1>EasyBond</h1>
          <p>‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà EasyBond</p>
          <span>‡∏ú‡∏π‡πâ‡∏Ñ‡πâ‡∏≤‡∏ï‡∏£‡∏≤‡∏™‡∏≤‡∏£‡∏´‡∏ô‡∏µ‡πâ</span>
        </div>
        <form onSubmit={(e) => e.preventDefault()}>
          <div className="input-group">
            <label>‡∏≠‡∏µ‡πÄ‡∏°‡∏•</label>
            <div className="input-wrapper">
              <i className="bi bi-person"></i>
              <input
                type="email"
                id="email"
                placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
              />
            </div>
          </div>
          <div className="input-group">
            <label>‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</label>
            <div className="input-wrapper">
              <i className="bi bi-lock"></i>
              <input
                type="password"
                id="password"
                placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
                value={national_id}
                onChange={(e) => setnational_id(e.target.value)}
                required
              />
            </div>
          </div>
          <div>
            <button type="button" className="btn-primary" onClick={handleLogin}>
              ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default LoginTrader;
